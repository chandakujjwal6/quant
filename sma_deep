import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def calculate_profit(df):
    """
    Calculates total profit/loss from buy/sell signals
    Requires alternating buy/sell signals starting with buy
    """
    total_profit = 0.0
    in_position = False
    buy_price = 0.0
    
    for index, row in df.iterrows():
        if row['Signal'] == 1 and not in_position:
            buy_price = row['Price']
            in_position = True
        elif row['Signal'] == -1 and in_position:
            sell_price = row['Price']
            total_profit += sell_price - buy_price
            in_position = False
    
    return total_profit

# Generate synthetic stock price data
np.random.seed(42)
n_days = 200
price_series = np.cumsum(np.random.randn(n_days)) + 100
dates = pd.date_range(start='2023-01-01', periods=n_days)

# Create DataFrame
df = pd.DataFrame({'Date': dates, 'Price': price_series})

# Calculate moving averages
df['SMA20'] = df['Price'].rolling(window=20).mean()
df['SMA50'] = df['Price'].rolling(window=50).mean()

# Initialize signal columns
df['Signal'] = 0  # 1 for Buy, -1 for Sell
last_action = None  # Track last action to ensure alternation

# Detect crossover signals with alternating logic
for i in range(1, len(df)):
    if pd.isna(df.loc[i, 'SMA20']) or pd.isna(df.loc[i, 'SMA50']):
        continue
    
    prev_short = df.loc[i-1, 'SMA20']
    prev_long = df.loc[i-1, 'SMA50']
    curr_short = df.loc[i, 'SMA20']
    curr_long = df.loc[i, 'SMA50']
    
    # Golden Cross (Buy Signal)
    if prev_short < prev_long and curr_short > curr_long:
        if last_action in [None, 'sell']:
            df.at[i, 'Signal'] = 1
            last_action = 'buy'
    
    # Death Cross (Sell Signal)
    elif prev_short > prev_long and curr_short < curr_long:
        if last_action == 'buy':
            df.at[i, 'Signal'] = -1
            last_action = 'sell'

# Calculate profit
total_profit = calculate_profit(df)

# Create plot
plt.figure(figsize=(14, 7))
plt.plot(df['Date'], df['Price'], label='Price', alpha=0.7)
plt.plot(df['Date'], df['SMA20'], label='20-day SMA', alpha=0.7)
plt.plot(df['Date'], df['SMA50'], label='50-day SMA', alpha=0.7)

# Plot buy/sell signals
buy_dates = df[df['Signal'] == 1]['Date']
buy_prices = df[df['Signal'] == 1]['Price']
sell_dates = df[df['Signal'] == -1]['Date']
sell_prices = df[df['Signal'] == -1]['Price']

plt.scatter(buy_dates, buy_prices, marker='^', color='g', s=100, 
            label=f'Buy ({len(buy_dates)})', zorder=5)
plt.scatter(sell_dates, sell_prices, marker='v', color='r', s=100, 
            label=f'Sell ({len(sell_dates)})', zorder=5)

# Add profit annotation
profit_color = 'g' if total_profit >= 0 else 'r'
plt.annotate(f'Total Profit/Loss: ${total_profit:.2f}',
            xy=(0.05, 0.95), xycoords='axes fraction',
            fontsize=12, color=profit_color,
            bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))

# Formatting
plt.title('Stock Price Trading Strategy - Moving Average Crossover')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Print results
print(f"Total Completed Trades: {min(len(buy_dates), len(sell_dates))}")
print(f"Remaining Position: {'Long' in (len(buy_dates) > len(sell_dates))}")
print(f"Total Profit/Loss: ${total_profit:.2f}")